<?xml version="1.0"?>
<data>
<original_program>
<source_code name="Main.java" main="false">
package net.heinke.cbingutter.main;

import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.scoreboard.ScoreboardPainter;
import net.heinke.cbingutter.game.scoreboard.Scorecard;

public class Main {
public static void main(String[] args) {
ScoreboardPainter.welcomeMessage();
Scorecard sc = new Scorecard();
sc.loadPlayers();
try {
sc.playGame();
} catch (BowlingException e) {
ScoreboardPainter.printMessage(e.getMessage() + &quot; Now terminating&quot;);
System.exit(1);
}
}
}
</source_code>
<source_code name="ScoreboardPainter.java" main="false">
package net.heinke.cbingutter.game.scoreboard;

import java.util.List;

import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;

public class ScoreboardPainter {

private static String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot;
+ &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot;
+ &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot;
+ &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot;
+ &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot;
+ &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static String turkeyArt = &quot; .--.n&quot;
+ &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot;
+ &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot;
+ &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot;
+ &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot;
+ &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot;
+ &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static String spareArt = &quot; ______ _______ _ _______ ________ n&quot;
+ &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot;
+ &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot;
+ &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot;
+ &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot;
+ &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard(List&lt;Player&gt; players,
int longestPlayerName) {
printColumnHeadings(longestPlayerName, players.get(0));
for (Player p : players) {
printTopLine(p, longestPlayerName);
printBottomLine(p, longestPlayerName);
}
}

private static String printTopLine(Player p, int longestPlayerName) {
StringBuilder topLine = new StringBuilder();
topLine.append(String.format(&quot;%-&quot; + longestPlayerName + &quot;s|&quot;,
p.getPlayerName()));
topLine.append(String.format(&quot;%-3s|| &quot;, p.getRunningTotal()));
List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames()
.size() ? p.getFrames() : p.getFrames().subList(0,
Constants.FRAMES_PER_MATCH - 1);
for (Frame f : regFrames) {
topLine.append(String.format(&quot;|%3s|&quot;, f.toString()));
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
Frame g = p.getFrames().get(Constants.FRAMES_PER_MATCH - 1);
topLine.append(&quot;|&quot; + g.toString());

for (Frame f : p.getFrames().subList(Constants.FRAMES_PER_MATCH,
p.getFrames().size())) {
topLine.append(&quot; &quot; + f.toString());
}
topLine.append(&quot;|&quot;);
}

topLine.append(&quot;n&quot;);
System.out.print(topLine.toString());
return topLine.toString();
}

private static void printBottomLine(Player p, int longestPlayerName) {
StringBuilder bottomLine = new StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append(String.format(&quot;%&quot; + padding + &quot;s&quot;, &quot;&quot;));
List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames()
.size() ? p.getFrames() : p.getFrames().subList(0,
Constants.FRAMES_PER_MATCH - 1);
for (Frame f : printFrames) {
bottomLine.append(String.format(&quot;|%3s|&quot;, f.printAbsoluteScore()));
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
Frame g = p.getFrames().get(Constants.FRAMES_PER_MATCH - 1);
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size())
bottomLine
.append(String.format(&quot;|%5s|&quot;, g.printAbsoluteScore()));
else
bottomLine
.append(String.format(&quot;|%3s|&quot;, g.printAbsoluteScore()));
}
bottomLine.append(&quot;nn&quot;);
System.out.print(bottomLine.toString());
}

private static void printColumnHeadings(int longestPlayerName,
Player firstPlayer) {
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH
: firstPlayer.getFrames().size();
StringBuilder headers = new StringBuilder();
int padding = longestPlayerName + 1;
headers.append(String.format(&quot;%&quot; + padding + &quot;s&quot;, &quot;&quot;));
headers.append(&quot;Tot&quot;);
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append(String.format(&quot;%&quot; + padding + &quot;s&quot;, &quot;&quot;));
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append(String.format(&quot; %3s &quot;, i));
}
headers.append(&quot;n&quot;);
System.out.print(headers.toString());
}

public static void printResultEffects(Frame f, Player p) {
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2
&amp;&amp; p.getFrames().get(framesPlayed - 2).isStrike()
&amp;&amp; p.getFrames().get(framesPlayed - 3).isStrike()) {
System.out.print(turkeyArt);
} else {
System.out.print(strikeArt);
}
}

else if (f.isSpare()) {
System.out.print(spareArt);
}
}

public static void printMessage(String string) {
System.out.println(string);

}

public static void printWinners(List&lt;Player&gt; leaders) {

if (leaders.size() == 1) {
printMessage(&quot;Thanks for playing, the winner is &quot;
+ leaders.get(0).getPlayerName());
} else {
String output = &quot;Thanks for playing, we have a tie between &quot;;
for (Player p : leaders) {
output += &quot;, &quot; + p.getPlayerName() ;
}
printMessage(output);
}
}

public static void welcomeMessage() {
String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot;
+ &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot;
+ &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot;
+ &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot;
+ &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot;
+ &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot;
+

&quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot;
+ &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot;
+ &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot;
+ &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot;
+ &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot;
+ &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print(g);
}

}
</source_code>
<source_code name="Scorecard.java" main="false">
package net.heinke.cbingutter.game.scoreboard;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;

public class Scorecard {
private List&lt;Player&gt; players;
private int longestPlayerName;

public void loadPlayers() {
int numPlayers = getNumberOfPlayer();
players = new ArrayList&lt;Player&gt;(numPlayers);
addPlayers(numPlayers);
longestPlayerName = longestPlayerName();
}

public void playGame() throws BowlingException {
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (Player p : players) {
do {
int score = fetchScore(p);
Frame f = p.playShot(score);
ScoreboardPainter.printResultEffects(f, p);
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard(players, longestPlayerName);
}
++counter;
}
ScoreboardPainter.printWinners(findWinner(players));
}

private void addPlayers(int numPlayers){
String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter
.printMessage(&quot;What&apos;s your name, player &quot; + i + &quot;?&quot;);
while (!success) {
BufferedReader br = new BufferedReader(new InputStreamReader(
System.in));
try {
input = br.readLine().trim();
if(Validator.validatePlayerName(input))
success = true;
} catch (IOException e) {
continue;
}
}
players.add(new Player(input));
}
}

private int getNumberOfPlayer(){
boolean success = false;
String input = null;
while (!success) {
ScoreboardPainter.printMessage(&quot;How many players?&quot;);
BufferedReader br = new BufferedReader(new InputStreamReader(
System.in));
try {
input = br.readLine().trim();
if(Validator.validateNumberOfPlayers(input))
success = true;
} catch (IOException e) {
continue;
}
}
return Integer.parseInt(input);
}

private int fetchScore(Player p) {
boolean success = false;
String input = null;
while (!success) {
System.out.print(p.getPlayerName() + &quot; Enter score: &quot;);
BufferedReader br = new BufferedReader(new InputStreamReader(
System.in));
try {
input = br.readLine().trim();
if (Validator.validateScore(input, p))
success = true;
} catch (IOException e) {
continue;
}
}
if (input.equalsIgnoreCase(&quot;X&quot;))
return Constants.MAX_PINS_PER_FRAME;
else if (input.equals(&quot;/&quot;)) {
Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
return Integer.parseInt(input);
}

private List&lt;Player&gt; findWinner(List&lt;Player&gt; players) {
List&lt;Player&gt; leadingPlayers = new ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (Player p : players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add(p);
} else if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add(p);
}
}
return leadingPlayers;
}

public int longestPlayerName(){
int longest = 0;
for(Player p :players){
if(p.getPlayerName().length() &gt; longest)
longest = p.getPlayerName().length();
}
return longest;
}

}
</source_code>
<source_code name="Validator.java" main="false">
package net.heinke.cbingutter.game.scoreboard;

import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;

public class Validator {
public static boolean validateScore(String input, Player p) {
String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches(pattern)) {
ScoreboardPainter.printMessage(&quot;Please enter 0-9, X or /&quot;);
return false;
}
Frame f = p.getCurrentFrame();
if (!input.equals(&quot;/&quot;) &amp;&amp; !input.equalsIgnoreCase(&quot;X&quot;)) {
int score = Integer.parseInt(input);
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage(&quot;Please enter 0-9, X or /&quot;);
return false;
} else if (score &lt; 0) {
ScoreboardPainter.printMessage(&quot;Please enter a positive score&quot;);
return false;
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter
.printMessage(&quot;You can&apos;t hit pins that don&apos;t exist&quot;);
return false;
}
}
} else if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase(&quot;X&quot;)) {
ScoreboardPainter
.printMessage(&quot;Please enter your actual score or /&quot;);
return false;
} else if (input.equals(&quot;/&quot;) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage(&quot;Did you meant to enter X?&quot;);
return false;
}
return true;
}


public static boolean validateNumberOfPlayers(String input){
String pattern = &quot;^[1-9]$&quot;;
if (!input.matches(pattern)){
ScoreboardPainter
.printMessage(&quot;Please enter a number of players between 1 and 9&quot;);
return false;
}
return true;
}

public static boolean validatePlayerName(String input){
String pattern = &quot;^$&quot;;
if (input.matches(pattern)){
ScoreboardPainter
.printMessage(&quot;Please enter a number of players between 1 and 9&quot;);
return false;
}
return true;
}
}
</source_code>
<source_code name="NegativeScoreException.java" main="false">
package net.heinke.cbingutter.game.exception;

@SuppressWarnings(&quot;serial&quot;)
public class NegativeScoreException extends BowlingException {

public NegativeScoreException() {
message = &quot;A negative score is not valid&quot;;
}

}
</source_code>
<source_code name="AvailiblePinsException.java" main="false">
package net.heinke.cbingutter.game.exception;

@SuppressWarnings(&quot;serial&quot;)
public class AvailiblePinsException extends BowlingException {
public AvailiblePinsException(){
message = &quot;Not enough availible pins for the entered score&quot;;
}
}
</source_code>
<source_code name="TooManyShotsException.java" main="false">
package net.heinke.cbingutter.game.exception;

@SuppressWarnings(&quot;serial&quot;)
public class TooManyShotsException extends BowlingException {

public TooManyShotsException() {
message = &quot;Number of shot taken exceeds the per frame limit&quot;;
}

}
</source_code>
<source_code name="BowlingException.java" main="false">
package net.heinke.cbingutter.game.exception;

@SuppressWarnings(&quot;serial&quot;)
public class BowlingException extends Exception {
protected String message;

public BowlingException(String message){
this.message = message;
}
public BowlingException(){
}

public String getMessage(){
return message;
}
}
</source_code>
<source_code name="Player.java" main="false">
package net.heinke.cbingutter.game.player;

import java.util.ArrayList;
import java.util.List;

import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player{
private String playerName;
private List&lt;Frame&gt; frames;
private Frame currentFrame;
private int extraFrameToPlay = 0;
private int runningTotal = 0;
private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player(String name){
this.playerName = name;
this.frames = new ArrayList&lt;Frame&gt;(noOfFrames);
}

public Player(String name, int noOfFrames){
this.playerName = name;
this.frames = new ArrayList&lt;Frame&gt;(noOfFrames);
this.noOfFrames = noOfFrames;
}

public Frame playShot(int score) throws BowlingException{
if(currentFrame == null || currentFrame.isCompleted()){
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame(frames.get(frames.size() - 1)) : new RegularFrame();
}
currentFrame.playShot(score);
if(currentFrame.isCompleted()){
frames.add(currentFrame);
if(frames.size() == noOfFrames
&amp;&amp; currentFrame.isSpareOrStrike()){
++extraFrameToPlay;
}
else if(frames.size() == noOfFrames +1
&amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get(frames.size() - 2).isStrike()){
++extraFrameToPlay;
}else{
extraFrameToPlay=0;
}
updateAbsoluteScore();
return frames.get(frames.size() - 1);
}
return currentFrame;
}

public boolean hasConcludedTurn(){
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal(){
return runningTotal;
}

public Frame getCurrentFrame(){
return currentFrame;
}

public String getPlayerName() {
return playerName;
}

public List&lt;Frame&gt; getFrames() {
return frames;
}

private Frame handleBonusFrame(Frame frame){

if(frame.isStrike() &amp;&amp; extraFrameToPlay == 1)
return new StrikeBonusDummyFrame();
else{
return new SpareBonusDummyFrame();
}

}

private void updateAbsoluteScore(){
int currentIndex = frames.size() - 1;

if(!currentFrame.isSpareOrStrike()){
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if(currentIndex - 2 &gt;= 0){
lookBack(currentIndex, true);
}
else if(currentIndex - 1 == 0){
lookBack(currentIndex, false);
}

}

private void lookBack(int currentIndex, boolean doubleLb){
Frame singleLookback = frames.get(currentIndex - 1);
if(singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE){
if(singleLookback.isSpare()){
runningTotal += singleLookback.setAbsoluteScore(currentFrame.fetchScore(0));
}
else if(singleLookback.isStrike()){
if(!currentFrame.isStrike()){
if(currentFrame.getShotsTaken() &gt; 1)
runningTotal += singleLookback.setAbsoluteScore(currentFrame.fetchScore(0), currentFrame.fetchScore(1));
else
runningTotal += singleLookback.setAbsoluteScore(currentFrame.fetchScore(0));
}
if(doubleLb){
Frame doubleLookback = frames.get(currentIndex - 2);
if(doubleLookback.isStrike()){
runningTotal += doubleLookback.setAbsoluteScore(singleLookback.fetchScore(0), currentFrame.fetchScore(0));
}
}
}
}
}




}
</source_code>
<source_code name="Constants.java" main="false">
package net.heinke.cbingutter.game;

public class Constants {
public static final int SHOTS_PER_FRAME = 2;
public static final int MAX_PINS_PER_FRAME = 10;
public static final int FRAMES_PER_MATCH = 10;
public static final int BONUS_SHOTS_FINAL_FRAME_SPARE = 1;
public static final int BONUS_SHOTS_FINAL_FRAME_STRIKE = 2;
public static final int DUMMY_ABS_SCORE = -1;
public static final int SECOND_ROW_PADDING = 9;
}
</source_code>
<source_code name="Frame.java" main="false">
package net.heinke.cbingutter.game.frame;

import net.heinke.cbingutter.game.exception.BowlingException;

public interface Frame {
public void playShot(int score) throws BowlingException;
public int fetchScore(int index);
public boolean isStrike();
public boolean isSpare();
public boolean isSpareOrStrike();
public boolean isCompleted();
public int setAbsoluteScore(int score1, int score2);
public int setAbsoluteScore(int score);
public int setAbsoluteScoreNoBonus();
public int getAbsoluteScore();
public int getShotsTaken();
public int pinsRemaining();
public String printAbsoluteScore();
}
</source_code>
<source_code name="StrikeBonusDummyFrame.java" main="false">
package net.heinke.cbingutter.game.frame;

import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends RegularFrame {
@Override
public boolean isCompleted() {
if(isStrike())
return true;
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

@Override
public int setAbsoluteScore(int score1, int score2) {
return 0;
}

@Override
public int setAbsoluteScore(int score) {
return 0;
}

@Override
public int setAbsoluteScoreNoBonus() {
return 0;
}
}
</source_code>
<source_code name="RegularFrame.java" main="false">
package net.heinke.cbingutter.game.frame;

import java.util.ArrayList;
import java.util.List;

import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements Frame{

protected List&lt;Integer&gt; bowls;
private int runningRawScore = 0;
private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame(int bowlsPerFrame){
bowls = new ArrayList&lt;Integer&gt;(bowlsPerFrame);
}

public RegularFrame(){
bowls = new ArrayList&lt;Integer&gt;(Constants.SHOTS_PER_FRAME);
}

@Override
public void playShot(int score) throws BowlingException {
if(score &lt; 0)
throw new NegativeScoreException();
else if(score &gt; Constants.MAX_PINS_PER_FRAME ||
score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore)
throw new AvailiblePinsException();
else if(bowls.size() &gt;= Constants.SHOTS_PER_FRAME)
throw new TooManyShotsException();

bowls.add(score);
runningRawScore += score;
}

@Override
public int fetchScore(int index) {
return bowls.get(index);
}

@Override
public boolean isStrike() {
return isSpareOrStrike() &amp;&amp;
bowls.size() == 1;
}

@Override
public boolean isSpare() {
return isSpareOrStrike() &amp;&amp;
bowls.size() &gt; 1;
}

@Override
public boolean isSpareOrStrike() {
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

@Override
public boolean isCompleted() {
if(isSpareOrStrike())
return true;
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

@Override
public int setAbsoluteScore(int score1, int score2) {
absoluteScore = runningRawScore;
if(isStrike())
absoluteScore += score1 + score2;
return absoluteScore;
}

@Override
public int setAbsoluteScore(int score) {
absoluteScore = runningRawScore;
if(isSpare())
absoluteScore += score;
return absoluteScore;
}

@Override
public int setAbsoluteScoreNoBonus() {
absoluteScore = runningRawScore;
return absoluteScore;
}

@Override
public int getAbsoluteScore() {
return absoluteScore;
}

@Override
public String printAbsoluteScore() {

return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : new Integer(absoluteScore).toString();
}

@Override
public int getShotsTaken() {
return bowls.size();
}

@Override
public String toString(){
StringBuilder b = new StringBuilder();
int runTot = 0;
for(Integer bowl : bowls){
runTot += bowl;
if(bowl == Constants.MAX_PINS_PER_FRAME){
b.append(&quot;X&quot;);
}
else if(runTot == Constants.MAX_PINS_PER_FRAME){
b.append(&quot;/&quot;);
}
else if(bowl == 0){
b.append(&quot;-&quot;);
}
else{
b.append(bowl);
}
b.append(&quot; &quot;);
}
return b.toString().trim();
}

@Override
public int pinsRemaining(){
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}
}
</source_code>
<source_code name="SpareBonusDummyFrame.java" main="false">
package net.heinke.cbingutter.game.frame;

import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends RegularFrame{
public SpareBonusDummyFrame() {
super(Constants.BONUS_SHOTS_FINAL_FRAME_SPARE);
}


@Override
public boolean isCompleted() {
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

@Override
public int setAbsoluteScore(int score){
return 0;
}

@Override
public int setAbsoluteScoreNoBonus(){
return 0;
}

</source_code>
</original_program>
<mutant_program name="AOIS_10" type="AOIS">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (--score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt;= Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_4" type="COD">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_5" type="COI">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (!(f != null &amp;&amp; !f.isCompleted())) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_9" type="AOIS">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (++score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &lt;= Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_2" type="COR">
<modified_source name="Validator.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) ^ !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_4" type="COI">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (!(f != null) &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_10" type="COR">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null ^ f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_14" type="AOIS">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; --score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_5" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; ++Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_12" type="AOIS">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score-- &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_3" type="LOI">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (~score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &lt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score == Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_3" type="COD">
<modified_source name="Validator.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_8" type="ROR">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f == null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_11" type="AOIS">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score++ &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_3" type="COR">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null || !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="Validator.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!(!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; ))) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_11" type="COI">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (!(f == null || f.isCompleted()))) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_7" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME++) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_8" type="COR">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if ((f != null &amp;&amp; !f.isCompleted()) ^ input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (!(score &gt; Constants.MAX_PINS_PER_FRAME)) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_10" type="COI">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (!(f == null) || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_7" type="COI">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (!(f != null) &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score != Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_13" type="AOIS">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; ++score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_9" type="COR">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null &amp;&amp; f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_9" type="COI">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (!(f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; ))) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_6" type="COI">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (!(f.pinsRemaining() &lt; score)) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score-- &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_7" type="COR">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() || input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_11" type="COR">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) || (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_1" type="COD">
<modified_source name="Validator.java" start_line="18" end_line="18">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_5" type="COD">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_2" type="COD">
<modified_source name="Validator.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_5" type="COR">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null || !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_6" type="COR">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null ^ !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_4" type="COR">
<modified_source name="Validator.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null ^ !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_9" type="ROR">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f == null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_6" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; --Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_4" type="LOI">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; ~score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_1" type="LOI">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (~score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score++ &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_8" type="COI">
<modified_source name="Validator.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (!(f != null &amp;&amp; !f.isCompleted()) &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_1" type="COR">
<modified_source name="Validator.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) || !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_2" type="LOI">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; ~Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (false) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_8" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME--) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_12" type="COI">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (!(input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted()))) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_1" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (++score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_12" type="COR">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) ^ (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_10" type="ROR">
<modified_source name="Validator.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f != null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_16" type="AOIS">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score--) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (true) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_15" type="AOIS">
<modified_source name="Validator.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score++) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_2" type="AOIS">
<modified_source name="Validator.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (--score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_3" type="COI">
<modified_source name="Validator.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (!(score &lt; 0)) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_6" type="COD">
<modified_source name="Validator.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Validator
{

public static boolean validateScore( java.lang.String input, net.heinke.cbingutter.game.player.Player p )
{
java.lang.String pattern = &quot;^[0-9/Xx]$&quot;;
if (!input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
}
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
if (!input.equals( &quot;/&quot; ) &amp;&amp; !input.equalsIgnoreCase( &quot;X&quot; )) {
int score = Integer.parseInt( input );
if (score &gt; Constants.MAX_PINS_PER_FRAME) {
ScoreboardPainter.printMessage( &quot;Please enter 0-9, X or /&quot; );
return false;
} else {
if (score &lt; 0) {
ScoreboardPainter.printMessage( &quot;Please enter a positive score&quot; );
return false;
}
}
if (f != null &amp;&amp; !f.isCompleted()) {
if (f.pinsRemaining() &lt; score) {
ScoreboardPainter.printMessage( &quot;You can&apos;t hit pins that don&apos;t exist&quot; );
return false;
}
}
} else {
if (f != null &amp;&amp; !f.isCompleted() &amp;&amp; input.equalsIgnoreCase( &quot;X&quot; )) {
ScoreboardPainter.printMessage( &quot;Please enter your actual score or /&quot; );
return false;
} else {
if (input.equals( &quot;/&quot; ) &amp;&amp; (f == null || f.isCompleted())) {
ScoreboardPainter.printMessage( &quot;Did you meant to enter X?&quot; );
return false;
}
}
}
return true;
}

public static boolean validateNumberOfPlayers( java.lang.String input )
{
java.lang.String pattern = &quot;^[1-9]$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

public static boolean validatePlayerName( java.lang.String input )
{
java.lang.String pattern = &quot;^$&quot;;
if (input.matches( pattern )) {
ScoreboardPainter.printMessage( &quot;Please enter a number of players between 1 and 9&quot; );
return false;
}
return true;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_22" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt;= longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_44" type="AOIS">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest--) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_45" type="AOIS">
<modified_source name="Scorecard.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest++;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_16" type="LOI">
<modified_source name="Scorecard.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return ~longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_42" type="AOIS">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; --longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_15" type="LOI">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; ~longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_27" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (true) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_6" type="AOIU">
<modified_source name="Scorecard.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return -longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_41" type="AOIS">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; ++longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_26" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() != longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_28" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (false) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_24" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &lt;= longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_46" type="AOIS">
<modified_source name="Scorecard.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest--;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_43" type="AOIS">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest++) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_8" type="COI">
<modified_source name="Scorecard.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (!(p.getPlayerName().length() &gt; longest)) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_25" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() == longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_23" type="ROR">
<modified_source name="Scorecard.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &lt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_4" type="COI">
<modified_source name="Scorecard.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
!success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_3" type="COD">
<modified_source name="Scorecard.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_10" type="AOIS">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter-- &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_17" type="AOIS">
<modified_source name="Scorecard.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName++ );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_9" type="AOIS">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter++ &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_14" type="AOIS">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH--) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_12" type="AOIS">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; --Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_3" type="LOI">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (~counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_18" type="AOIS">
<modified_source name="Scorecard.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName-- );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_11" type="AOIS">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; ++Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_7" type="LOI">
<modified_source name="Scorecard.java" start_line="46" end_line="46">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++~counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_5" type="LOI">
<modified_source name="Scorecard.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( ~score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="Scorecard.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (!(counter &lt; Constants.FRAMES_PER_MATCH)) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_7" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (++counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_13" type="AOIS">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH++) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORS_1" type="AORS">
<modified_source name="Scorecard.java" start_line="46" end_line="46">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
counter--;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_1" type="COD">
<modified_source name="Scorecard.java" start_line="18" end_line="18">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_4" type="LOI">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; ~Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AODS_1" type="AODS">
<modified_source name="Scorecard.java" start_line="46" end_line="46">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_3" type="AOIU">
<modified_source name="Scorecard.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( -score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_6" type="LOI">
<modified_source name="Scorecard.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, ~longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_4" type="AOIU">
<modified_source name="Scorecard.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, -longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_8" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (--counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_16" type="AOIS">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score-- );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_15" type="AOIS">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score++ );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &gt; numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_11" type="LOI">
<modified_source name="Scorecard.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + ~i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_19" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; ++i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_9" type="LOI">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= ~numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_30" type="AOIS">
<modified_source name="Scorecard.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i-- + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt; numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_20" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; --i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_23" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= ++numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &gt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i == numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_29" type="AOIS">
<modified_source name="Scorecard.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i++ + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_27" type="AOIS">
<modified_source name="Scorecard.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + ++i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; !(i &lt;= numPlayers); ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_25" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers++; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_21" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i++ &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i != numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_2" type="COD">
<modified_source name="Scorecard.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_10" type="LOI">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++~i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_8" type="LOI">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; ~i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_22" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i-- &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_28" type="AOIS">
<modified_source name="Scorecard.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + --i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORS_2" type="AORS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; i--) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; false; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_24" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= --numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_26" type="AOIS">
<modified_source name="Scorecard.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers--; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; true; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_3" type="COI">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
!success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_1" type="AOIU">
<modified_source name="Scorecard.java" start_line="28" end_line="28">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( -numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_5" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers++ );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers-- );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_2" type="AOIU">
<modified_source name="Scorecard.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( -numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_6" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers-- );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_1" type="LOI">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( ~numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers++ );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_2" type="LOI">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( ~numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_1" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( ++numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_2" type="AOIS">
<modified_source name="Scorecard.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( --numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_13" type="LOI">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == ~currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_36" type="AOIS">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh--) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_14" type="LOI">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; ~currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_15" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt;= currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_18" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() == currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_39" type="AOIS">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh++) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_20" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (true) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_8" type="ROR">
<modified_source name="Scorecard.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() &gt; currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_21" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (false) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_11" type="ROR">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() &lt;= currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_40" type="AOIS">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh--) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_34" type="AOIS">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == --currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_17" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &lt;= currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_19" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() != currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_7" type="COI">
<modified_source name="Scorecard.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (!(p.getRunningTotal() &gt; currentHigh)) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_6" type="COI">
<modified_source name="Scorecard.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (!(p.getRunningTotal() == currentHigh)) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_35" type="AOIS">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh++) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_13" type="ROR">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (true) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_14" type="ROR">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (false) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_9" type="ROR">
<modified_source name="Scorecard.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() &gt;= currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_12" type="ROR">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() != currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_33" type="AOIS">
<modified_source name="Scorecard.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == ++currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_37" type="AOIS">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; ++currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_38" type="AOIS">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; --currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_10" type="ROR">
<modified_source name="Scorecard.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() &lt; currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_16" type="ROR">
<modified_source name="Scorecard.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &lt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_4" type="COD">
<modified_source name="Scorecard.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_5" type="COI">
<modified_source name="Scorecard.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
!success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_32" type="AOIS">
<modified_source name="Scorecard.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME--;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_31" type="AOIS">
<modified_source name="Scorecard.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return Constants.MAX_PINS_PER_FRAME++;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_5" type="AOIU">
<modified_source name="Scorecard.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return -Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_12" type="LOI">
<modified_source name="Scorecard.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class Scorecard
{

private java.util.List&lt;Player&gt; players;

private int longestPlayerName;

public void loadPlayers()
{
int numPlayers = getNumberOfPlayer();
players = new java.util.ArrayList&lt;Player&gt;( numPlayers );
addPlayers( numPlayers );
longestPlayerName = longestPlayerName();
}

public void playGame()
throws net.heinke.cbingutter.game.exception.BowlingException
{
int counter = 0;
while (counter &lt; Constants.FRAMES_PER_MATCH) {
for (net.heinke.cbingutter.game.player.Player p: players) {
do {
int score = fetchScore( p );
net.heinke.cbingutter.game.frame.Frame f = p.playShot( score );
ScoreboardPainter.printResultEffects( f, p );
} while (!p.hasConcludedTurn());
ScoreboardPainter.printScoreCard( players, longestPlayerName );
}
++counter;
}
ScoreboardPainter.printWinners( findWinner( players ) );
}

private void addPlayers( int numPlayers )
{
java.lang.String input = null;
for (int i = 1; i &lt;= numPlayers; ++i) {
boolean success = false;
ScoreboardPainter.printMessage( &quot;What&apos;s your name, player &quot; + i + &quot;?&quot; );
while (!success) {
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validatePlayerName( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
players.add( new net.heinke.cbingutter.game.player.Player( input ) );
}
}

private int getNumberOfPlayer()
{
boolean success = false;
java.lang.String input = null;
while (!success) {
ScoreboardPainter.printMessage( &quot;How many players?&quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateNumberOfPlayers( input )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
return Integer.parseInt( input );
}

private int fetchScore( net.heinke.cbingutter.game.player.Player p )
{
boolean success = false;
java.lang.String input = null;
while (!success) {
System.out.print( p.getPlayerName() + &quot; Enter score: &quot; );
java.io.BufferedReader br = new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
try {
input = br.readLine().trim();
if (Validator.validateScore( input, p )) {
success = true;
}
} catch ( java.io.IOException e ) {
continue;
}
}
if (input.equalsIgnoreCase( &quot;X&quot; )) {
return ~Constants.MAX_PINS_PER_FRAME;
} else {
if (input.equals( &quot;/&quot; )) {
net.heinke.cbingutter.game.frame.Frame f = p.getCurrentFrame();
return f.pinsRemaining();
}
}
return Integer.parseInt( input );
}

private java.util.List&lt;Player&gt; findWinner( java.util.List&lt;Player&gt; players )
{
java.util.List&lt;Player&gt; leadingPlayers = new java.util.ArrayList&lt;Player&gt;();
int currentHigh = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getRunningTotal() == currentHigh) {
leadingPlayers.add( p );
} else {
if (p.getRunningTotal() &gt; currentHigh) {
currentHigh = p.getRunningTotal();
leadingPlayers.clear();
leadingPlayers.add( p );
}
}
}
return leadingPlayers;
}

public int longestPlayerName()
{
int longest = 0;
for (net.heinke.cbingutter.game.player.Player p: players) {
if (p.getPlayerName().length() &gt; longest) {
longest = p.getPlayerName().length();
}
}
return longest;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_4" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH + 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_8" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH + 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_5" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_2" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH / 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_1" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_7" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH % 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_3" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH % 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_6" type="AORB">
<modified_source name="ScoreboardPainter.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.scoreboard;


import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.player.Player;


public class ScoreboardPainter
{

private static java.lang.String strikeArt = &quot; ______ _________ _______ _____ ___ ____ ________ _ n&quot; + &quot;.&apos; ____ \ | _ _ ||_ __ \ |_ _||_ ||_ _| |_ __ || |n&quot; + &quot;| (___ \_||_/ | | \_| | |__) | | | | |_/ / | |_ \_|| |n&quot; + &quot; _.____`. | | | __ / | | | __&apos;. | _| _ | |n&quot; + &quot;| \____) | _| |_ _| | \ \_ _| |_ _| | \ \_ _| |__/ ||_|n&quot; + &quot; \______.&apos; |_____| |____| |___||_____||____||____||________|(_)nn&quot;;

private static java.lang.String turkeyArt = &quot; .--.n&quot; + &quot; {\ / q {\n&quot; + &quot; { `\ \ (-(~`n&quot; + &quot;{ &apos;.{`\ \ \ )n&quot; + &quot;{&apos;-{ &apos; \ .-&quot;&quot;&apos;-. \ \n&quot; + &quot;{._{&apos;.&apos; \/ &apos;.) \n&quot; + &quot;{_.{. {` |n&quot; + &quot;{._{ &apos; { ;&apos;-=-. |n&quot; + &quot; {-.{.&apos; { &apos;;-=-.` /n&quot; + &quot; {._.{.; &apos;-=- .&apos;n&quot; + &quot; {_.-&apos; `&apos;.__ _,-&apos;n&quot; + &quot; jgs |||`n&quot; + &quot; .=&apos;==,nn&quot;;

private static java.lang.String spareArt = &quot; ______ _______ _ _______ ________ n&quot; + &quot;.&apos; ____ \ |_ __ \ / \ |_ __ \ |_ __ |n&quot; + &quot;| (___ \_| | |__) | / _ \ | |__) | | |_ \_|n&quot; + &quot; _.____`. | ___/ / ___ \ | __ / | _| _ n&quot; + &quot;| \____) | _| |_ _/ / \ \_ _| | \ \_ _| |__/ |n&quot; + &quot; \______.&apos;|_____||____| |____||____| |___||________|nn&quot;;

public static void printScoreCard( java.util.List&lt;Player&gt; players, int longestPlayerName )
{
printColumnHeadings( longestPlayerName, players.get( 0 ) );
for (net.heinke.cbingutter.game.player.Player p: players) {
printTopLine( p, longestPlayerName );
printBottomLine( p, longestPlayerName );
}
}

private static java.lang.String printTopLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder topLine = new java.lang.StringBuilder();
topLine.append( String.format( &quot;%-&quot; + longestPlayerName + &quot;s|&quot;, p.getPlayerName() ) );
topLine.append( String.format( &quot;%-3s|| &quot;, p.getRunningTotal() ) );
java.util.List&lt;Frame&gt; regFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: regFrames) {
topLine.append( String.format( &quot;|%3s|&quot;, f.toString() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH / 1 );
topLine.append( &quot;|&quot; + g.toString() );
for (net.heinke.cbingutter.game.frame.Frame f: p.getFrames().subList( Constants.FRAMES_PER_MATCH, p.getFrames().size() )) {
topLine.append( &quot; &quot; + f.toString() );
}
topLine.append( &quot;|&quot; );
}
topLine.append( &quot;n&quot; );
System.out.print( topLine.toString() );
return topLine.toString();
}

private static void printBottomLine( net.heinke.cbingutter.game.player.Player p, int longestPlayerName )
{
java.lang.StringBuilder bottomLine = new java.lang.StringBuilder();
int padding = longestPlayerName + Constants.SECOND_ROW_PADDING;
bottomLine.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
java.util.List&lt;Frame&gt; printFrames = Constants.FRAMES_PER_MATCH &gt; p.getFrames().size() ? p.getFrames() : p.getFrames().subList( 0, Constants.FRAMES_PER_MATCH - 1 );
for (net.heinke.cbingutter.game.frame.Frame f: printFrames) {
bottomLine.append( String.format( &quot;|%3s|&quot;, f.printAbsoluteScore() ) );
}
if (Constants.FRAMES_PER_MATCH &lt;= p.getFrames().size()) {
net.heinke.cbingutter.game.frame.Frame g = p.getFrames().get( Constants.FRAMES_PER_MATCH - 1 );
if (Constants.FRAMES_PER_MATCH &lt; p.getFrames().size()) {
bottomLine.append( String.format( &quot;|%5s|&quot;, g.printAbsoluteScore() ) );
} else {
bottomLine.append( String.format( &quot;|%3s|&quot;, g.printAbsoluteScore() ) );
}
}
bottomLine.append( &quot;nn&quot; );
System.out.print( bottomLine.toString() );
}

private static void printColumnHeadings( int longestPlayerName, net.heinke.cbingutter.game.player.Player firstPlayer )
{
int framesToPrint = firstPlayer.getFrames().size() &gt; Constants.FRAMES_PER_MATCH ? Constants.FRAMES_PER_MATCH : firstPlayer.getFrames().size();
java.lang.StringBuilder headers = new java.lang.StringBuilder();
int padding = longestPlayerName + 1;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
headers.append( &quot;Tot&quot; );
padding = Constants.SECOND_ROW_PADDING - 5;
headers.append( String.format( &quot;%&quot; + padding + &quot;s&quot;, &quot;&quot; ) );
for (int i = 1; i &lt;= framesToPrint; ++i) {
headers.append( String.format( &quot; %3s &quot;, i ) );
}
headers.append( &quot;n&quot; );
System.out.print( headers.toString() );
}

public static void printResultEffects( net.heinke.cbingutter.game.frame.Frame f, net.heinke.cbingutter.game.player.Player p )
{
if (f.isStrike()) {
int framesPlayed = p.getFrames().size();
if (framesPlayed &gt; 2 &amp;&amp; p.getFrames().get( framesPlayed - 2 ).isStrike() &amp;&amp; p.getFrames().get( framesPlayed - 3 ).isStrike()) {
System.out.print( turkeyArt );
} else {
System.out.print( strikeArt );
}
} else {
if (f.isSpare()) {
System.out.print( spareArt );
}
}
}

public static void printMessage( java.lang.String string )
{
System.out.println( string );
}

public static void printWinners( java.util.List&lt;Player&gt; leaders )
{
if (leaders.size() == 1) {
printMessage( &quot;Thanks for playing, the winner is &quot; + leaders.get( 0 ).getPlayerName() );
} else {
java.lang.String output = &quot;Thanks for playing, we have a tie between &quot;;
for (net.heinke.cbingutter.game.player.Player p: leaders) {
output += &quot;, &quot; + p.getPlayerName();
}
printMessage( output );
}
}

public static void welcomeMessage()
{
java.lang.String g = &quot; _____ _____ _ _ _ _______ ____ ______ _ _____ ________ ________ _____ _______ _ _____ n&quot; + &quot; |_ _| / ____| /\ | \ | ( )__ __| | _ \| ____| | |_ _| ____\ \ / / ____| |_ _|__ __( )/ ____|n&quot; + &quot; | | | | / \ | \| |/ | | | |_) | |__ | | | | | |__ \ \ / /| |__ | | | | |/| (___ n&quot; + &quot; | | | | / /\ \ | . ` | | | | _ &lt;| __| | | | | | __| \ \/ / | __| | | | | \___ \ n&quot; + &quot; _| |_ | |____ / ____ \| |\ | | | | |_) | |____| |____ _| |_| |____ \ / | |____ _| |_ | | ____) | n&quot; + &quot; |_____| \_____/_/ \_\_| \_| |_| |____/|______|______|_____|______| \/ |______| |_____| |_| |_____/ n&quot; + &quot; _ _ ____ _______ _____ _ _ _______ _______ ______ _____ n&quot; + &quot;| \ | |/ __ \__ __| / ____| | | |__ __|__ __| ____| __ \n&quot; + &quot;| \| | | | | | | | | __| | | | | | | | | |__ | |__) |n&quot; + &quot;| . ` | | | | | | | | |_ | | | | | | | | | __| | _ /n&quot; + &quot;| |\ | |__| | | | | |__| | |__| | | | | | | |____| | \ \n&quot; + &quot;|_| \_|\____/ |_| \_____|\____/ |_| |_| |______|_| \_\nn&quot;;
System.out.print( g );
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_4" type="AORB">
<modified_source name="Player.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() + 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_8" type="AORB">
<modified_source name="Player.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames - 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_9" type="AORB">
<modified_source name="Player.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_12" type="AORB">
<modified_source name="Player.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() + 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_5" type="AORB">
<modified_source name="Player.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_2" type="AORB">
<modified_source name="Player.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() / 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_1" type="AORB">
<modified_source name="Player.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_7" type="AORB">
<modified_source name="Player.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames % 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_3" type="AORB">
<modified_source name="Player.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() % 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_6" type="AORB">
<modified_source name="Player.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames / 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() - 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_11" type="AORB">
<modified_source name="Player.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() % 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_10" type="AORB">
<modified_source name="Player.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.player;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.frame.Frame;
import net.heinke.cbingutter.game.frame.RegularFrame;
import net.heinke.cbingutter.game.frame.SpareBonusDummyFrame;
import net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame;


public class Player
{

private java.lang.String playerName;

private java.util.List&lt;Frame&gt; frames;

private net.heinke.cbingutter.game.frame.Frame currentFrame;

private int extraFrameToPlay = 0;

private int runningTotal = 0;

private int noOfFrames = Constants.FRAMES_PER_MATCH;

public Player( java.lang.String name )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
}

public Player( java.lang.String name, int noOfFrames )
{
this.playerName = name;
this.frames = new java.util.ArrayList&lt;Frame&gt;( noOfFrames );
this.noOfFrames = noOfFrames;
}

public net.heinke.cbingutter.game.frame.Frame playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (currentFrame == null || currentFrame.isCompleted()) {
currentFrame = extraFrameToPlay &gt; 0 ? handleBonusFrame( frames.get( frames.size() - 1 ) ) : new net.heinke.cbingutter.game.frame.RegularFrame();
}
currentFrame.playShot( score );
if (currentFrame.isCompleted()) {
frames.add( currentFrame );
if (frames.size() == noOfFrames &amp;&amp; currentFrame.isSpareOrStrike()) {
++extraFrameToPlay;
} else {
if (frames.size() == noOfFrames + 1 &amp;&amp; currentFrame.isStrike() &amp;&amp; frames.get( frames.size() / 2 ).isStrike()) {
++extraFrameToPlay;
} else {
extraFrameToPlay = 0;
}
}
updateAbsoluteScore();
return frames.get( frames.size() - 1 );
}
return currentFrame;
}

public boolean hasConcludedTurn()
{
return currentFrame.isCompleted() &amp;&amp; extraFrameToPlay == 0;
}

public int getRunningTotal()
{
return runningTotal;
}

public net.heinke.cbingutter.game.frame.Frame getCurrentFrame()
{
return currentFrame;
}

public java.lang.String getPlayerName()
{
return playerName;
}

public java.util.List&lt;Frame&gt; getFrames()
{
return frames;
}

private net.heinke.cbingutter.game.frame.Frame handleBonusFrame( net.heinke.cbingutter.game.frame.Frame frame )
{
if (frame.isStrike() &amp;&amp; extraFrameToPlay == 1) {
return new net.heinke.cbingutter.game.frame.StrikeBonusDummyFrame();
} else {
return new net.heinke.cbingutter.game.frame.SpareBonusDummyFrame();
}
}

private void updateAbsoluteScore()
{
int currentIndex = frames.size() - 1;
if (!currentFrame.isSpareOrStrike()) {
runningTotal += currentFrame.setAbsoluteScoreNoBonus();
}
if (currentIndex - 2 &gt;= 0) {
lookBack( currentIndex, true );
} else {
if (currentIndex - 1 == 0) {
lookBack( currentIndex, false );
}
}
}

private void lookBack( int currentIndex, boolean doubleLb )
{
net.heinke.cbingutter.game.frame.Frame singleLookback = frames.get( currentIndex - 1 );
if (singleLookback.getAbsoluteScore() == Constants.DUMMY_ABS_SCORE) {
if (singleLookback.isSpare()) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
} else {
if (singleLookback.isStrike()) {
if (!currentFrame.isStrike()) {
if (currentFrame.getShotsTaken() &gt; 1) {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ), currentFrame.fetchScore( 1 ) );
} else {
runningTotal += singleLookback.setAbsoluteScore( currentFrame.fetchScore( 0 ) );
}
}
if (doubleLb) {
net.heinke.cbingutter.game.frame.Frame doubleLookback = frames.get( currentIndex - 2 );
if (doubleLookback.isStrike()) {
runningTotal += doubleLookback.setAbsoluteScore( singleLookback.fetchScore( 0 ), currentFrame.fetchScore( 0 ) );
}
}
}
}
}
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() &gt; Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() &lt; Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() &gt;= Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() &lt;= Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="StrikeBonusDummyFrame.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return !(bowls.size() == Constants.SHOTS_PER_FRAME);
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() != Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME--;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_1" type="LOI">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() == ~Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME++;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return false;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_1" type="AOIS">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() == ++Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return true;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_2" type="AOIS">
<modified_source name="StrikeBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class StrikeBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public boolean isCompleted()
{
if (isStrike()) {
return true;
}
return bowls.size() == --Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
return 0;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_1" type="AOIU">
<modified_source name="SpareBonusDummyFrame.java" start_line="28" end_line="28">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( -Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_1" type="LOI">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( ~Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_1" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE++ );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_2" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE-- );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() &gt; Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() &lt; Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_5" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE++;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() &gt;= Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() &lt;= Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="SpareBonusDummyFrame.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return !(super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE);
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() != Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == --Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_6" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == Constants.BONUS_SHOTS_FINAL_FRAME_SPARE--;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == ++Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_2" type="LOI">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return super.bowls.size() == ~Constants.BONUS_SHOTS_FINAL_FRAME_SPARE;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return false;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="SpareBonusDummyFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import net.heinke.cbingutter.game.Constants;


public class SpareBonusDummyFrame extends net.heinke.cbingutter.game.frame.RegularFrame
{

public SpareBonusDummyFrame()
{
super( Constants.BONUS_SHOTS_FINAL_FRAME_SPARE );
}

public boolean isCompleted()
{
return true;
}

public int setAbsoluteScore( int score )
{
return 0;
}

public int setAbsoluteScoreNoBonus()
{
return 0;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_95" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == ++Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_99" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore++ )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_53" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore &lt;= Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_98" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE-- ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_28" type="LOI">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == ~Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_97" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE++ ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_50" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore &gt; Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_100" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore-- )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_94" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore-- == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_56" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return false ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_51" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore &gt;= Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_93" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore++ == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_96" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == --Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_27" type="LOI">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return ~absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_52" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore &lt; Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_91" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return ++absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_29" type="LOI">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( ~absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_92" type="AOIS">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return --absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_16" type="AOIU">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( -absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_12" type="COI">
<modified_source name="RegularFrame.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return !(absoluteScore == Constants.DUMMY_ABS_SCORE) ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_55" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return true ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_54" type="ROR">
<modified_source name="RegularFrame.java" start_line="112" end_line="112">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore != Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_109" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == ++Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_63" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (true) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_112" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME--) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_111" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME++) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_31" type="LOI">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (~runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_15" type="COI">
<modified_source name="RegularFrame.java" start_line="132" end_line="132">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (!(bowl == 0)) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_62" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot != Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_13" type="COI">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (!(bowl == Constants.MAX_PINS_PER_FRAME)) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_60" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot &lt; Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_16" type="ASRS">
<modified_source name="RegularFrame.java" start_line="125" end_line="125">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot %= bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_59" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot &gt;= Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_103" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME++) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_106" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (--runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_108" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot-- == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_30" type="LOI">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == ~Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_61" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot &lt;= Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_105" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (++runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_14" type="COI">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (!(runTot == Constants.MAX_PINS_PER_FRAME)) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_15" type="ASRS">
<modified_source name="RegularFrame.java" start_line="125" end_line="125">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot -= bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_102" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == --Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_65" type="ROR">
<modified_source name="RegularFrame.java" start_line="132" end_line="132">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl != 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_57" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl != Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_110" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == --Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_14" type="ASRS">
<modified_source name="RegularFrame.java" start_line="125" end_line="125">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot *= bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_64" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (false) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_58" type="ROR">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot &gt; Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_13" type="ASRS">
<modified_source name="RegularFrame.java" start_line="125" end_line="125">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot /= bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_104" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME--) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_107" type="AOIS">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot++ == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_32" type="LOI">
<modified_source name="RegularFrame.java" start_line="129" end_line="129">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == ~Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_101" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == ++Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt;= Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_11" type="LOI">
<modified_source name="RegularFrame.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( ~score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_36" type="AOIS">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= --Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_19" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; ++Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_9" type="LOI">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - ~runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_4" type="AORB">
<modified_source name="RegularFrame.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME + runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_44" type="AOIS">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score--;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_30" type="AOIS">
<modified_source name="RegularFrame.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME-- - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_15" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt; Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_17" type="AOIS">
<modified_source name="RegularFrame.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score++ &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_5" type="COI">
<modified_source name="RegularFrame.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (!(bowls.size() &gt;= Constants.SHOTS_PER_FRAME)) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_32" type="AOIS">
<modified_source name="RegularFrame.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - --runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_2" type="ASRS">
<modified_source name="RegularFrame.java" start_line="50" end_line="50">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore *= score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_42" type="AOIS">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += --score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_18" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() == Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_39" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score++ );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &lt;= Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_20" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; --Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_2" type="COR">
<modified_source name="RegularFrame.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME ^ score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_4" type="COI">
<modified_source name="RegularFrame.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (!(score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore)) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_14" type="AOIS">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score-- &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_23" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || ++score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_12" type="AOIS">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (--score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_20" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (true) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &lt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_18" type="AOIS">
<modified_source name="RegularFrame.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score-- &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score == Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_8" type="ROR">
<modified_source name="RegularFrame.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt;= Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_21" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (false) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_11" type="ROR">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score == Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_40" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score-- );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_11" type="AOIS">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (++score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_7" type="LOI">
<modified_source name="RegularFrame.java" start_line="46" end_line="46">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || ~score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_34" type="AOIS">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore--) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_31" type="AOIS">
<modified_source name="RegularFrame.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - ++runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_17" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &lt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_29" type="AOIS">
<modified_source name="RegularFrame.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME++ - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_5" type="LOI">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (~score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="RegularFrame.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (!(score &lt; 0)) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_27" type="AOIS">
<modified_source name="RegularFrame.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; ++Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (!(score &gt; Constants.MAX_PINS_PER_FRAME) || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_41" type="AOIS">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += ++score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_1" type="ASRS">
<modified_source name="RegularFrame.java" start_line="50" end_line="50">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore /= score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_19" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() != Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_25" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score++ &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_21" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME++ || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_2" type="AORB">
<modified_source name="RegularFrame.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME / runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score != Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_13" type="AOIS">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score++ &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_3" type="ASRS">
<modified_source name="RegularFrame.java" start_line="50" end_line="50">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore -= score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_1" type="AORB">
<modified_source name="RegularFrame.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_35" type="AOIS">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= ++Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_13" type="ROR">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || true) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_14" type="ROR">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || false) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_10" type="LOI">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= ~Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_43" type="AOIS">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score++;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_3" type="AORB">
<modified_source name="RegularFrame.java" start_line="36" end_line="36">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME % runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_9" type="ROR">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &lt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_8" type="LOI">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; ~Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_5" type="AOIU">
<modified_source name="RegularFrame.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += -score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_12" type="ROR">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score != Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_33" type="AOIS">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore++) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_4" type="LOI">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (~score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_22" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME-- || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_37" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME++) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_28" type="AOIS">
<modified_source name="RegularFrame.java" start_line="56" end_line="56">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; --Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_4" type="ASRS">
<modified_source name="RegularFrame.java" start_line="50" end_line="50">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore %= score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_1" type="COR">
<modified_source name="RegularFrame.java" start_line="23" end_line="23">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME &amp;&amp; score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_38" type="AOIS">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME--) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (false || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_12" type="LOI">
<modified_source name="RegularFrame.java" start_line="108" end_line="108">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += ~score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_6" type="LOI">
<modified_source name="RegularFrame.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; ~Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_4" type="AOIU">
<modified_source name="RegularFrame.java" start_line="44" end_line="44">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( -score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_24" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || --score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_26" type="AOIS">
<modified_source name="RegularFrame.java" start_line="54" end_line="54">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score-- &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_10" type="ROR">
<modified_source name="RegularFrame.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &lt;= Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_16" type="AOIS">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (--score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (true || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_16" type="ROR">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &lt; Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_15" type="AOIS">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (++score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_3" type="COI">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || !(score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore)) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_89" type="AOIS">
<modified_source name="RegularFrame.java" start_line="107" end_line="107">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore++;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_26" type="LOI">
<modified_source name="RegularFrame.java" start_line="107" end_line="107">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return ~absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_15" type="AOIU">
<modified_source name="RegularFrame.java" start_line="107" end_line="107">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return -absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_90" type="AOIS">
<modified_source name="RegularFrame.java" start_line="107" end_line="107">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore--;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_9" type="AORB">
<modified_source name="RegularFrame.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_115" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME++ - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_33" type="LOI">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return ~Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_116" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME-- - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_120" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore--;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_12" type="AORB">
<modified_source name="RegularFrame.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME + runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_119" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore++;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_118" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - --runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_17" type="AOIU">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return -Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_113" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return ++Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_117" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - ++runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_114" type="AOIS">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return --Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_34" type="LOI">
<modified_source name="RegularFrame.java" start_line="146" end_line="146">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - ~runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_11" type="AORB">
<modified_source name="RegularFrame.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME % runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_10" type="AORB">
<modified_source name="RegularFrame.java" start_line="57" end_line="57">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME / runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_85" type="AOIS">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore++;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_87" type="AOIS">
<modified_source name="RegularFrame.java" start_line="102" end_line="102">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore++;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_13" type="AOIU">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = -runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_86" type="AOIS">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore--;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_88" type="AOIS">
<modified_source name="RegularFrame.java" start_line="102" end_line="102">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore--;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_24" type="LOI">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = ~runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_83" type="AOIS">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = ++runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_84" type="AOIS">
<modified_source name="RegularFrame.java" start_line="101" end_line="101">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = --runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_25" type="LOI">
<modified_source name="RegularFrame.java" start_line="102" end_line="102">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return ~absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_14" type="AOIU">
<modified_source name="RegularFrame.java" start_line="102" end_line="102">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return -absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_63" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += ++score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_8" type="AORB">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 - score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_65" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1++ + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_59" type="AOIS">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = ++runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_64" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += --score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_66" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1-- + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_7" type="ASRS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore -= score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_70" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2--;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_9" type="AOIU">
<modified_source name="RegularFrame.java" start_line="87" end_line="87">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return -absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_7" type="AOIU">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = -runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_69" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2++;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_68" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + --score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_5" type="AORB">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_8" type="ASRS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore %= score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_18" type="LOI">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += ~score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_19" type="LOI">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + ~score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_62" type="AOIS">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore--;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_8" type="AOIU">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += -score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_5" type="ASRS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore /= score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_6" type="ASRS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore *= score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_60" type="AOIS">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = --runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_7" type="AORB">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 % score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_17" type="LOI">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = ~runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_71" type="AOIS">
<modified_source name="RegularFrame.java" start_line="87" end_line="87">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore++;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_6" type="AORB">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 / score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_61" type="AOIS">
<modified_source name="RegularFrame.java" start_line="83" end_line="83">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore++;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_72" type="AOIS">
<modified_source name="RegularFrame.java" start_line="87" end_line="87">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore--;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_20" type="LOI">
<modified_source name="RegularFrame.java" start_line="87" end_line="87">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return ~absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_67" type="AOIS">
<modified_source name="RegularFrame.java" start_line="85" end_line="85">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + ++score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_13" type="LOI">
<modified_source name="RegularFrame.java" start_line="123" end_line="123">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( ~index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_45" type="AOIS">
<modified_source name="RegularFrame.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index++ );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_6" type="AOIU">
<modified_source name="RegularFrame.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( -index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_46" type="AOIS">
<modified_source name="RegularFrame.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index-- );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_56" type="AOIS">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == --Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_48" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return true;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_55" type="AOIS">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == ++Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_16" type="LOI">
<modified_source name="RegularFrame.java" start_line="144" end_line="144">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == ~Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_58" type="AOIS">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME--;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_46" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() &lt;= Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_57" type="AOIS">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME++;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_45" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() &lt; Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_47" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() != Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_44" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() &gt;= Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_43" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() &gt; Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_11" type="COI">
<modified_source name="RegularFrame.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return !(bowls.size() == Constants.SHOTS_PER_FRAME);
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_49" type="ROR">
<modified_source name="RegularFrame.java" start_line="78" end_line="78">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return false;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_29" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt;= 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_30" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &lt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_35" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; false;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_32" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_9" type="COI">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return !(isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1);
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_31" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &lt;= 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_34" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; true;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_5" type="COR">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() || bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_6" type="COR">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() ^ bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_33" type="ROR">
<modified_source name="RegularFrame.java" start_line="65" end_line="65">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() != 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_8" type="COI">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; !(bowls.size() &gt; 1);
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_5" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame++ );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( --bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_2" type="AOIU">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( -bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_6" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame-- );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( ++bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_2" type="LOI">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( ~bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_82" type="AOIS">
<modified_source name="RegularFrame.java" start_line="96" end_line="96">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore--;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_73" type="AOIS">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = ++runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_10" type="ASRS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore *= score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_75" type="AOIS">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore++;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_21" type="LOI">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = ~runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_11" type="ASRS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore -= score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_77" type="AOIS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += ++score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_78" type="AOIS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += --score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_12" type="AOIU">
<modified_source name="RegularFrame.java" start_line="96" end_line="96">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return -absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_9" type="ASRS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore /= score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_76" type="AOIS">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore--;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_80" type="AOIS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score--;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_79" type="AOIS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score++;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_22" type="LOI">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += ~score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_11" type="AOIU">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += -score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_10" type="AOIU">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = -runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_74" type="AOIS">
<modified_source name="RegularFrame.java" start_line="92" end_line="92">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = --runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_81" type="AOIS">
<modified_source name="RegularFrame.java" start_line="96" end_line="96">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore++;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_23" type="LOI">
<modified_source name="RegularFrame.java" start_line="96" end_line="96">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return ~absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ASRS_12" type="ASRS">
<modified_source name="RegularFrame.java" start_line="94" end_line="94">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore %= score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_10" type="AOIS">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME-- );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_9" type="AOIS">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME++ );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_3" type="LOI">
<modified_source name="RegularFrame.java" start_line="29" end_line="29">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( ~Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_7" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( ++Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_3" type="AOIU">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( -Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_8" type="AOIS">
<modified_source name="RegularFrame.java" start_line="25" end_line="25">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( --Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_50" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore-- == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_14" type="LOI">
<modified_source name="RegularFrame.java" start_line="126" end_line="126">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return ~runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_40" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore != Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_52" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == --Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_36" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore &gt; Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_53" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME++;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_15" type="LOI">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == ~Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_47" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return ++runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_10" type="COI">
<modified_source name="RegularFrame.java" start_line="45" end_line="45">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return !(runningRawScore == Constants.MAX_PINS_PER_FRAME);
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_42" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return false;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_37" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore &gt;= Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_54" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME--;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_49" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore++ == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_38" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore &lt; Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_51" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == ++Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_39" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore &lt;= Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_41" type="ROR">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return true;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_48" type="AOIS">
<modified_source name="RegularFrame.java" start_line="70" end_line="70">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return --runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_22" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_27" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; true;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_3" type="COR">
<modified_source name="RegularFrame.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() || bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_7" type="COI">
<modified_source name="RegularFrame.java" start_line="41" end_line="41">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return !(isSpareOrStrike() &amp;&amp; bowls.size() == 1);
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_26" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() != 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_6" type="COI">
<modified_source name="RegularFrame.java" start_line="35" end_line="35">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; !(bowls.size() == 1);
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_28" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; false;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_24" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &lt; 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_4" type="COR">
<modified_source name="RegularFrame.java" start_line="34" end_line="34">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() ^ bowls.size() == 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_25" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &lt;= 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_23" type="ROR">
<modified_source name="RegularFrame.java" start_line="140" end_line="140">
// This is a mutant program.
// Author : ysma

package net.heinke.cbingutter.game.frame;


import java.util.ArrayList;
import java.util.List;
import net.heinke.cbingutter.game.Constants;
import net.heinke.cbingutter.game.exception.AvailiblePinsException;
import net.heinke.cbingutter.game.exception.BowlingException;
import net.heinke.cbingutter.game.exception.NegativeScoreException;
import net.heinke.cbingutter.game.exception.TooManyShotsException;


public class RegularFrame implements net.heinke.cbingutter.game.frame.Frame
{

protected java.util.List&lt;Integer&gt; bowls;

private int runningRawScore = 0;

private int absoluteScore = Constants.DUMMY_ABS_SCORE;

public RegularFrame( int bowlsPerFrame )
{
bowls = new java.util.ArrayList&lt;Integer&gt;( bowlsPerFrame );
}

public RegularFrame()
{
bowls = new java.util.ArrayList&lt;Integer&gt;( Constants.SHOTS_PER_FRAME );
}

public void playShot( int score )
throws net.heinke.cbingutter.game.exception.BowlingException
{
if (score &lt; 0) {
throw new net.heinke.cbingutter.game.exception.NegativeScoreException();
} else {
if (score &gt; Constants.MAX_PINS_PER_FRAME || score &gt; Constants.MAX_PINS_PER_FRAME - runningRawScore) {
throw new net.heinke.cbingutter.game.exception.AvailiblePinsException();
} else {
if (bowls.size() &gt;= Constants.SHOTS_PER_FRAME) {
throw new net.heinke.cbingutter.game.exception.TooManyShotsException();
}
}
}
bowls.add( score );
runningRawScore += score;
}

public int fetchScore( int index )
{
return bowls.get( index );
}

public boolean isStrike()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt;= 1;
}

public boolean isSpare()
{
return isSpareOrStrike() &amp;&amp; bowls.size() &gt; 1;
}

public boolean isSpareOrStrike()
{
return runningRawScore == Constants.MAX_PINS_PER_FRAME;
}

public boolean isCompleted()
{
if (isSpareOrStrike()) {
return true;
}
return bowls.size() == Constants.SHOTS_PER_FRAME;
}

public int setAbsoluteScore( int score1, int score2 )
{
absoluteScore = runningRawScore;
if (isStrike()) {
absoluteScore += score1 + score2;
}
return absoluteScore;
}

public int setAbsoluteScore( int score )
{
absoluteScore = runningRawScore;
if (isSpare()) {
absoluteScore += score;
}
return absoluteScore;
}

public int setAbsoluteScoreNoBonus()
{
absoluteScore = runningRawScore;
return absoluteScore;
}

public int getAbsoluteScore()
{
return absoluteScore;
}

public java.lang.String printAbsoluteScore()
{
return absoluteScore == Constants.DUMMY_ABS_SCORE ? &quot;&quot; : (new java.lang.Integer( absoluteScore )).toString();
}

public int getShotsTaken()
{
return bowls.size();
}

public java.lang.String toString()
{
java.lang.StringBuilder b = new java.lang.StringBuilder();
int runTot = 0;
for (java.lang.Integer bowl: bowls) {
runTot += bowl;
if (bowl == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;X&quot; );
} else {
if (runTot == Constants.MAX_PINS_PER_FRAME) {
b.append( &quot;/&quot; );
} else {
if (bowl == 0) {
b.append( &quot;-&quot; );
} else {
b.append( bowl );
}
}
}
b.append( &quot; &quot; );
}
return b.toString().trim();
}

public int pinsRemaining()
{
return Constants.MAX_PINS_PER_FRAME - runningRawScore;
}

}
</modified_source>
<test name="testStrikeDummy">
<result>no</result>
</test>
<test name="testSingleShotDummy">
<result>no</result>
</test>
<test name="testStrikeFrame">
<result>no</result>
</test>
<test name="testSpareFrame">
<result>no</result>
</test>
<test name="testNonStrikeOrSpareFrame">
<result>no</result>
</test>
<test name="testSingleShotFrame">
<result>no</result>
</test>
<test name="testFinalFrameAllStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeSparePlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikePinsRemainPlayer">
<result>no</result>
</test>
<test name="testFinalFrameStrikeStrikeNormalPlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareStrikePlayer">
<result>no</result>
</test>
<test name="testFinalFrameSpareNormalPlayer">
<result>no</result>
</test>
<test name="testFinalNormalPlayer">
<result>no</result>
</test>
<test name="testLookbackStrikeSparePlayer">
<result>no</result>
</test>
<test name="testLookbackSpareNormalPlayer">
<result>no</result>
</test>
<test name="testNegativeScoreValidator">
<result>no</result>
</test>
<test name="testRandomStringValidator">
<result>no</result>
</test>
<test name="testTooManyPinsValidator">
<result>no</result>
</test>
<test name="testNotEnoughRemainingPinsValidator">
<result>yes</result>
</test>
<test name="testStrikeSecondShotValidator">
<result>no</result>
</test>
<test name="testSpareFirstShotValidator">
<result>no</result>
</test>
</mutant_program>
</data>
