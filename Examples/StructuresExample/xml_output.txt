<?xml version="1.0"?>
<data>
<original_program>
<source_code name="HashSet.java" main="false">
package hashset;

import java.util.Iterator;
import java.util.NoSuchElementException;

/**
This class implements a hash set using separate chaining.
*/
public class HashSet
{
private Node[] buckets;
private int currentSize;

/**
Constructs a hash table.
@param bucketsLength the length of the buckets array
*/
public HashSet(int bucketsLength)
{
buckets = new Node[bucketsLength];
currentSize = 0;
}

/**
Tests for set membership.
@param x an object
@return true if x is an element of this set
*/
public boolean contains(Object x)
{
int h = x.hashCode();
if (h &lt; 0) { h = -h; }
h = h % buckets.length;

Node current = buckets[h];
while (current != null)
{
if (current.data.equals(x)) { return true; }
current = current.next;
}
return false;
}

/**
Adds an element to this set.
@param x an object
@return true if x is a new object, false if x was
already in the set
*/
public boolean add(Object x)
{
int h = x.hashCode();
if (h &lt; 0) { h = -h; }
h = h % buckets.length;

Node current = buckets[h];
while (current != null)
{
if (current.data.equals(x)) { return false; }
// Already in the set
current = current.next;
}
Node newNode = new Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

/**
Removes an object from this set.
@param x an object
@return true if x was removed from this set, false
if x was not an element of this set
*/
public boolean remove(Object x)
{
int h = x.hashCode();
if (h &lt; 0) { h = -h; }
h = h % buckets.length;

Node current = buckets[h];
Node previous = null;
while (current != null)
{
if (current.data.equals(x)) 
{
if (previous == null) { buckets[h] = current.next; }
else { previous.next = current.next; }
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

/**
Returns an iterator that traverses the elements of this set.
@return a hash set iterator
*/
public Iterator iterator()
{
return new HashSetIterator();
}

/**
Gets the number of elements in this set.
@return the number of elements
*/
public int size()
{
return currentSize;
}

class Node
{
public Object data;
public Node next;
}

class HashSetIterator implements Iterator
{
private int bucketIndex;
private Node current;

/**
Constructs a hash set iterator that points to the
first element of the hash set.
*/
public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) { return true; }
for (int b = bucketIndex + 1; b &lt; buckets.length; b++)
{
if (buckets[b] != null) { return true; }
}
return false;
}

public Object next()
{
if (current != null &amp;&amp; current.next != null) 
{ 
current = current.next; // Move to next element in bucket
}
else // Move to next bucket
{ 
do
{
bucketIndex++;
if (bucketIndex == buckets.length) 
{
throw new NoSuchElementException();
}
current = buckets[bucketIndex];
}
while (current == null); 
}
return current.data;
}

public void remove()
{
throw new UnsupportedOperationException();
}
}
}
</source_code>
<source_code name="ListIterator.java" main="false">
package linkedlist;

/**
A list iterator allows access of a position in a linked list. 
This interface contains a subset of the methods of the 
standard java.util.ListIterator interface. The methods for
backward traversal are not included.
*/
public interface ListIterator
{ 
/**
Moves the iterator past the next element.
@return the traversed element
*/
Object next();

/**
Tests if there is an element after the iterator position.
@return true if there is an element after the iterator position
*/
boolean hasNext();

/**
Moves the iterator after the previous element.
@return the traversed element
*/
Object previous();

/**
Tests if there is an element before the iterator position.
@return true if there is an element before the iterator position
*/
boolean hasPrevious();

/**
Adds an element before the iterator position
and moves the iterator past the inserted element.
@param element the element to add
*/
void add(Object element);

/**
Removes the last traversed element. This method may
only be called after a call to the next() method.
*/
void remove();

/**
Sets the last traversed element to a different value. 
@param element the element to set
*/
void set(Object element);
}
</source_code>
<source_code name="LinkedList.java" main="false">
package linkedlist;

import java.util.NoSuchElementException;

/**
An implementation of a doubly linked list.
*/
public class LinkedList
{ 
private Node first;
private Node last;

/bin /boot /cdrom /dev /etc /home /initrd.img /initrd.img.old /lib /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /selinux /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old 
Constructs an empty linked list.
*/
public LinkedList()
{ 
first = null;
last = null;
}

/**
Returns the first element in the linked list.
@return the first element in the linked list
*/
public Object getFirst()
{ 
if (first == null) { throw new NoSuchElementException(); }
return first.data;
}

/**
Removes the first element in the linked list.
@return the removed element
*/
public Object removeFirst()
{ 
if (first == null) { throw new NoSuchElementException(); }
Object element = first.data;
first = first.next;
if (first == null) { last = null; } // List is now empty
else { first.previous = null; }
return element;
}

/**
Adds an element to the front of the linked list.
@param element the element to add
*/
public void addFirst(Object element)
{ 
Node newNode = new Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) { last = newNode; }
else { first.previous = newNode; }
first = newNode;
}

/**
Returns the last element in the linked list.
@return the last element in the linked list
*/
public Object getLast()
{ 
if (last == null) { throw new NoSuchElementException(); }
return last.data;
}

/**
Removes the last element in the linked list.
@return the removed element
*/
public Object removeLast()
{ 
if (last == null) { throw new NoSuchElementException(); }
Object element = last.data;
last = last.previous;
if (last == null) { first = null; } // List is now empty
else { last.next = null; }
return element;
}

/**
Adds an element to the back of the linked list.
@param element the element to add
*/
public void addLast(Object element)
{ 
Node newNode = new Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) { first = newNode; }
else { last.next = newNode; }
last = newNode;
}

/**
Returns an iterator for iterating through this list.
@return an iterator for iterating through this list
*/
public ListIterator listIterator()
{ 
return new LinkedListIterator();
}

class Node
{ 
public Object data;
public Node next;
public Node previous;
}

class LinkedListIterator implements ListIterator
{ 
private Node position;
private boolean isAfterNext;
private boolean isAfterPrevious;

/**
Constructs an iterator that points to the front
of the linked list.
*/
public LinkedListIterator()
{ 
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

/**
Moves the iterator past the next element.
@return the traversed element
*/
public Object next()
{ 
if (!hasNext()) { throw new NoSuchElementException(); }
isAfterNext = true;
isAfterPrevious = false;

if (position == null)
{
position = first;
}
else
{
position = position.next;
}

return position.data;
}

/**
Tests if there is an element after the iterator position.
@return true if there is an element after the iterator position
*/
public boolean hasNext()
{ 
if (position == null)
{
return first != null;
}
else
{
return position.next != null;
}
}

/**
Moves the iterator before the previous element.
@return the traversed element
*/
public Object previous()
{ 
if (!hasPrevious()) { throw new NoSuchElementException(); }
isAfterNext = false;
isAfterPrevious = true;

Object result = position.data;
position = position.previous;
return result;
}

/**
Tests if there is an element before the iterator position.
@return true if there is an element before the iterator position
*/
public boolean hasPrevious()
{ 
return position != null;
}

/**
Adds an element before the iterator position
and moves the iterator past the inserted element.
@param element the element to add
*/
public void add(Object element)
{ 
if (position == null)
{
addFirst(element);
position = first;
}
else if (position == last)
{
addLast(element);
position = last;
}
else
{ 
Node newNode = new Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}

isAfterNext = false;
isAfterPrevious = false;
}

/**
Removes the last traversed element. This method may
only be called after a call to the next() method.
*/
public void remove()
{ 
Node positionToRemove = lastPosition();

if (positionToRemove == first)
{
removeFirst();
}
else if (positionToRemove == last)
{
removeLast();
}
else
{
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}

if (isAfterNext) 
{ 
position = position.previous;
}

isAfterNext = false;
isAfterPrevious = false;
}

/**
Sets the last traversed element to a different value. 
@param element the element to set
*/
public void set(Object element)
{
Node positionToSet = lastPosition();
positionToSet.data = element; 
}

/**
Returns the last node traversed by this iterator, or
throws an IllegalStateException if there wasn&apos;t an immediately
preceding call to next or previous.
@return the last traversed node
*/
private Node lastPosition()
{
if (isAfterNext) 
{ 
return position; 
}
else if (isAfterPrevious) 
{
if (position == null)
{
return first;
}
else
{
return position.next;
}
}
else { throw new IllegalStateException(); }
} 
}
}
</source_code>
<source_code name="LinkedListStack.java" main="false">
package stack;

import java.util.NoSuchElementException;

/**
An implementation of a stack as a sequence of nodes.
*/
public class LinkedListStack
{
private Node first;

/bin /boot /cdrom /dev /etc /home /initrd.img /initrd.img.old /lib /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /selinux /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old 
Constructs an empty stack.
*/
public LinkedListStack()
{ 
first = null;
}

/**
Adds an element to the top of the stack.
@param element the element to add
*/
public void push(Object element)
{ 
Node newNode = new Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

/**
Removes the element from the top of the stack.
@return the removed element
*/
public Object pop()
{ 
if (first == null) { throw new NoSuchElementException(); }
Object element = first.data;
first = first.next;
return element;
}

/**
Checks whether this stack is empty.
@return true if the stack is empty
*/
public boolean empty()
{
return first == null;
}

class Node
{ 
public Object data;
public Node next;
}
}
</source_code>
</original_program>
<mutant_program name="AODU_4" type="AODU">
<modified_source name="HashSet.java" start_line="117" end_line="117">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = 1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_10" type="AOIS">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = --h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="HashSet.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current == null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>

<mutant_program name="AORB_4" type="AORB">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h - buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_17" type="AOIS">
<modified_source name="HashSet.java" start_line="31" end_line="31">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h++];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_9" type="AOIS">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ++h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_5" type="AOIS">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (++h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_12" type="AOIS">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h-- % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_3" type="LOI">
<modified_source name="HashSet.java" start_line="28" end_line="28">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -~h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_18" type="AOIS">
<modified_source name="HashSet.java" start_line="31" end_line="31">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h--];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_11" type="AOIS">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h++ % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_5" type="LOI">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % -buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (!(h &lt; 0)) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_7" type="AOIS">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h++ &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="HashSet.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (!(current != null)) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_2" type="AORB">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h / buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_1" type="AORB">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AODU_1" type="AODU">
<modified_source name="HashSet.java" start_line="28" end_line="28">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_2" type="AOIU">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = -h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_3" type="AORB">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h + buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_6" type="AOIS">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (--h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_4" type="LOI">
<modified_source name="HashSet.java" start_line="30" end_line="30">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ~h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_2" type="LOI">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (~h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_3" type="AOIU">
<modified_source name="HashSet.java" start_line="31" end_line="31">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[-h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_6" type="LOI">
<modified_source name="HashSet.java" start_line="31" end_line="31">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[~h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_8" type="AOIS">
<modified_source name="HashSet.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h-- &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_15" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (true) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_17" type="COI">
<modified_source name="HashSet.java" start_line="144" end_line="144">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (!(current == null));
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_65" type="AOIS">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (++bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_73" type="AOIS">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[++bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_75" type="AOIS">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex++];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_16" type="COI">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (!(bucketIndex == buckets.length)) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_28" type="LOI">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (~bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_66" type="AOIS">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (--bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_8" type="ROR">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current == null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_15" type="COI">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (!(current != null &amp;&amp; current.next != null)) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_11" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex &gt;= buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_13" type="COI">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (!(current != null) &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_17" type="ROR">
<modified_source name="HashSet.java" start_line="144" end_line="144">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current != null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_3" type="COR">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null || current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_68" type="AOIS">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex-- == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_76" type="AOIS">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex--];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_30" type="LOI">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[~bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_13" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex &lt;= buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_14" type="COI">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; !(current.next != null)) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_14" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex != buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COR_4" type="COR">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null ^ current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_9" type="ROR">
<modified_source name="HashSet.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next == null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_12" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex &lt; buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORS_4" type="AORS">
<modified_source name="HashSet.java" start_line="139" end_line="139">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex--;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_10" type="AOIU">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[-bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_29" type="LOI">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == -buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_74" type="AOIS">
<modified_source name="HashSet.java" start_line="143" end_line="143">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[--bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_10" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex &gt; buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_67" type="AOIS">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex++ == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_16" type="ROR">
<modified_source name="HashSet.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (false) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_50" type="AOIS">
<modified_source name="HashSet.java" start_line="70" end_line="70">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h--];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_44" type="AOIS">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h-- % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_9" type="AORB">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_5" type="COI">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (!(h &lt; 0)) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_16" type="LOI">
<modified_source name="HashSet.java" start_line="67" end_line="67">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -~h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_42" type="AOIS">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = --h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_39" type="AOIS">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h++ &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="HashSet.java" start_line="72" end_line="72">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current == null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="HashSet.java" start_line="74" end_line="74">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous != null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_7" type="AOIU">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = -h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_40" type="AOIS">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h-- &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_15" type="LOI">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (~h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_12" type="AORB">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h - buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_18" type="LOI">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % -buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_41" type="AOIS">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ++h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_7" type="COI">
<modified_source name="HashSet.java" start_line="74" end_line="74">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (!(previous == null)) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_19" type="LOI">
<modified_source name="HashSet.java" start_line="70" end_line="70">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[~h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_6" type="COI">
<modified_source name="HashSet.java" start_line="72" end_line="72">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (!(current != null)) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_8" type="AOIU">
<modified_source name="HashSet.java" start_line="70" end_line="70">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[-h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_49" type="AOIS">
<modified_source name="HashSet.java" start_line="70" end_line="70">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h++];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_43" type="AOIS">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h++ % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_17" type="LOI">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ~h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_37" type="AOIS">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (++h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORS_2" type="AORS">
<modified_source name="HashSet.java" start_line="79" end_line="79">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize++;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AODU_3" type="AODU">
<modified_source name="HashSet.java" start_line="67" end_line="67">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_38" type="AOIS">
<modified_source name="HashSet.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (--h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_11" type="AORB">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h + buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_10" type="AORB">
<modified_source name="HashSet.java" start_line="69" end_line="69">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h / buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_20" type="LOI">
<modified_source name="HashSet.java" start_line="75" end_line="75">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[~h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_63" type="AOIS">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b++] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_56" type="AOIS">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b-- &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_55" type="AOIS">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b++ &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AORS_3" type="AORS">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b--) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="COR_2" type="COR">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null ^ current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_53" type="AOIS">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; ++b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_26" type="LOI">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[~b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="COI_11" type="COI">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; !(b &lt; buckets.length); b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_10" type="COI">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (!(current != null &amp;&amp; current.next != null)) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current == null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_62" type="AOIS">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[--b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="COI_9" type="COI">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; !(current.next != null)) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_24" type="LOI">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; -buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_54" type="AOIS">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; --b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_61" type="AOIS">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[++b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="COI_8" type="COI">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (!(current != null) &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="COR_1" type="COR">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null || current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] == null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_12" type="COI">
<modified_source name="HashSet.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (!(buckets[b] != null)) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="HashSet.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next == null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_23" type="LOI">
<modified_source name="HashSet.java" start_line="125" end_line="125">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; ~b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="LOI_13" type="LOI">
<modified_source name="HashSet.java" start_line="58" end_line="58">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[~h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_11" type="LOI">
<modified_source name="HashSet.java" start_line="48" end_line="48">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[~h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_36" type="AOIS">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h--];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_19" type="AOIS">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (++h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_9" type="LOI">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ~h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_8" type="AORB">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h - buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_32" type="AOIS">
<modified_source name="HashSet.java" start_line="48" end_line="48">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h--];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_20" type="AOIS">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (--h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_4" type="COI">
<modified_source name="HashSet.java" start_line="49" end_line="49">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (!(current != null)) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_23" type="AOIS">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = ++h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="HashSet.java" start_line="49" end_line="49">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current == null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AODU_2" type="AODU">
<modified_source name="HashSet.java" start_line="45" end_line="45">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_7" type="LOI">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (~h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_34" type="AOIS">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[--h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_31" type="AOIS">
<modified_source name="HashSet.java" start_line="48" end_line="48">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h++];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_5" type="AORB">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h mutants original PackagedTestHarness testing_location XMLGenerator xml_output.txt buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_6" type="AOIU">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[-h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_25" type="AOIS">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h++ % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_21" type="AOIS">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h++ &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORS_1" type="AORS">
<modified_source name="HashSet.java" start_line="59" end_line="59">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize--;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_35" type="AOIS">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h++];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_10" type="LOI">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % -buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_7" type="AORB">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h + buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_8" type="LOI">
<modified_source name="HashSet.java" start_line="45" end_line="45">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -~h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_5" type="AOIU">
<modified_source name="HashSet.java" start_line="48" end_line="48">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[-h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_33" type="AOIS">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[++h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_22" type="AOIS">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h-- &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AORB_6" type="AORB">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h / buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_12" type="LOI">
<modified_source name="HashSet.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[~h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_4" type="AOIU">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = -h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_24" type="AOIS">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = --h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_26" type="AOIS">
<modified_source name="HashSet.java" start_line="47" end_line="47">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h-- % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_3" type="COI">
<modified_source name="HashSet.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (!(h &lt; 0)) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_1" type="AOIU">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[-bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_4" type="AOIS">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength--];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_1" type="LOI">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[~bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>yes</result>
</test>
<test name="hashTest2">
<result>yes</result>
</test>
<test name="hashTest3">
<result>yes</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>yes</result>
</test>
<test name="hashTest7">
<result>yes</result>
</test>
</mutant_program>
<mutant_program name="AOIS_3" type="AOIS">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength++];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_1" type="AOIS">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[++bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_2" type="AOIS">
<modified_source name="HashSet.java" start_line="20" end_line="20">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[--bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_52" type="AOIS">
<modified_source name="HashSet.java" start_line="95" end_line="95">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize--;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIU_9" type="AOIU">
<modified_source name="HashSet.java" start_line="95" end_line="95">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return -currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="AOIS_51" type="AOIS">
<modified_source name="HashSet.java" start_line="95" end_line="95">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize++;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="LOI_22" type="LOI">
<modified_source name="HashSet.java" start_line="95" end_line="95">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return ~currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>yes</result>
</test>
<test name="hashTest5">
<result>yes</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JSI_1" type="JSI">
<modified_source name="HashSet.java" start_line="14" end_line="14">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private static hashset.HashSet.Node[] buckets;

private int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JSI_2" type="JSI">
<modified_source name="HashSet.java" start_line="16" end_line="16">
// This is mutant program.
// Author : ysma

package hashset;


import java.util.Iterator;
import java.util.NoSuchElementException;


public class HashSet
{

private hashset.HashSet.Node[] buckets;

private static int currentSize;

public HashSet( int bucketsLength )
{
buckets = new hashset.HashSet.Node[bucketsLength];
currentSize = 0;
}

public boolean contains( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return true;
}
current = current.next;
}
return false;
}

public boolean add( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
while (current != null) {
if (current.data.equals( x )) {
return false;
}
current = current.next;
}
hashset.HashSet.Node newNode = new hashset.HashSet.Node();
newNode.data = x;
newNode.next = buckets[h];
buckets[h] = newNode;
currentSize++;
return true;
}

public boolean remove( java.lang.Object x )
{
int h = x.hashCode();
if (h &lt; 0) {
h = -h;
}
h = h % buckets.length;
hashset.HashSet.Node current = buckets[h];
hashset.HashSet.Node previous = null;
while (current != null) {
if (current.data.equals( x )) {
if (previous == null) {
buckets[h] = current.next;
} else {
previous.next = current.next;
}
currentSize--;
return true;
}
previous = current;
current = current.next;
}
return false;
}

public java.util.Iterator iterator()
{
return new hashset.HashSet.HashSetIterator();
}

public int size()
{
return currentSize;
}

class Node
{

public java.lang.Object data;

public hashset.HashSet.Node next;

}

class HashSetIterator implements java.util.Iterator
{

private int bucketIndex;

private hashset.HashSet.Node current;

public HashSetIterator()
{
current = null;
bucketIndex = -1;
}

public boolean hasNext()
{
if (current != null &amp;&amp; current.next != null) {
return true;
}
for (int b = bucketIndex + 1; b &lt; buckets.length; b++) {
if (buckets[b] != null) {
return true;
}
}
return false;
}

public java.lang.Object next()
{
if (current != null &amp;&amp; current.next != null) {
current = current.next;
} else {
do {
bucketIndex++;
if (bucketIndex == buckets.length) {
throw new java.util.NoSuchElementException();
}
current = buckets[bucketIndex];
} while (current == null);
}
return current.data;
}

public void remove()
{
throw new java.lang.UnsupportedOperationException();
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_2" type="COD">
<modified_source name="LinkedList.java" start_line="155" end_line="155">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_13" type="COI">
<modified_source name="LinkedList.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (!(position == null)) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COD_1" type="COD">
<modified_source name="LinkedList.java" start_line="131" end_line="131">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_9" type="ROR">
<modified_source name="LinkedList.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position != null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_5" type="COI">
<modified_source name="LinkedList.java" start_line="66" end_line="66">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (!(last == null)) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>yes</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_5" type="ROR">
<modified_source name="LinkedList.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last != null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>yes</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_3" type="ROR">
<modified_source name="LinkedList.java" start_line="72" end_line="72">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first != null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>yes</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="LinkedList.java" start_line="49" end_line="49">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first != null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="LinkedList.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (!(first == null)) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_3" type="COI">
<modified_source name="LinkedList.java" start_line="44" end_line="44">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (!(first == null)) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_8" type="ROR">
<modified_source name="LinkedList.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last != null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_8" type="COI">
<modified_source name="LinkedList.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (!(last == null)) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>yes</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_16" type="COI">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return !(position.next != null);
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_15" type="COI">
<modified_source name="LinkedList.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return !(first != null);
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_11" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first == null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_14" type="COI">
<modified_source name="LinkedList.java" start_line="135" end_line="135">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (!(position == null)) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_12" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next == null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_10" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position != null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_17" type="ROR">
<modified_source name="LinkedList.java" start_line="144" end_line="144">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove != last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>yes</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>yes</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>yes</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_25" type="COI">
<modified_source name="LinkedList.java" start_line="199" end_line="199">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (!(positionToRemove == last)) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_24" type="COI">
<modified_source name="LinkedList.java" start_line="196" end_line="196">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (!(positionToRemove == first)) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_26" type="COI">
<modified_source name="LinkedList.java" start_line="206" end_line="206">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (!isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_16" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove != first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_4" type="COI">
<modified_source name="LinkedList.java" start_line="49" end_line="49">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (!(first == null)) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_4" type="ROR">
<modified_source name="LinkedList.java" start_line="74" end_line="74">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first != null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>yes</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_20" type="COI">
<modified_source name="LinkedList.java" start_line="172" end_line="172">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (!(position == null)) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>yes</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_15" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position != last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>yes</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_21" type="COI">
<modified_source name="LinkedList.java" start_line="176" end_line="176">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (!(position == last)) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_14" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position != null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_7" type="COI">
<modified_source name="LinkedList.java" start_line="74" end_line="74">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (!(last == null)) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_6" type="COI">
<modified_source name="LinkedList.java" start_line="72" end_line="72">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (!(last == null)) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_7" type="ROR">
<modified_source name="LinkedList.java" start_line="126" end_line="126">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last != null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_6" type="ROR">
<modified_source name="LinkedList.java" start_line="122" end_line="122">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last != null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="LinkedList.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first != null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="LinkedList.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (!(first == null)) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>yes</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_13" type="ROR">
<modified_source name="LinkedList.java" start_line="140" end_line="140">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position == null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_19" type="COI">
<modified_source name="LinkedList.java" start_line="167" end_line="167">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return !(position != null);
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_30" type="COI">
<modified_source name="LinkedList.java" start_line="224" end_line="224">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (!isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_31" type="COI">
<modified_source name="LinkedList.java" start_line="225" end_line="225">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (!(position == null)) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_18" type="ROR">
<modified_source name="LinkedList.java" start_line="225" end_line="225">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position != null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_29" type="COI">
<modified_source name="LinkedList.java" start_line="221" end_line="221">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (!isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_13" type="PRV">
<modified_source name="LinkedList.java" start_line="182" end_line="182">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>yes</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_8" type="PRV">
<modified_source name="LinkedList.java" start_line="88" end_line="88">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = first;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_9" type="PRV">
<modified_source name="LinkedList.java" start_line="90" end_line="90">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = last;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_16" type="PRV">
<modified_source name="LinkedList.java" start_line="202" end_line="202">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = position;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_14" type="PRV">
<modified_source name="LinkedList.java" start_line="183" end_line="183">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = position;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_7" type="PRV">
<modified_source name="LinkedList.java" start_line="74" end_line="74">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = first;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_11" type="PRV">
<modified_source name="LinkedList.java" start_line="92" end_line="92">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = first;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_15" type="PRV">
<modified_source name="LinkedList.java" start_line="184" end_line="184">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = position;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_2" type="PRV">
<modified_source name="LinkedList.java" start_line="50" end_line="50">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = last;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JDC_1" type="JDC">
<modified_source name="LinkedList.java" start_line="17" end_line="17">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

// public JDC_1() { ... }

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_17" type="PRV">
<modified_source name="LinkedList.java" start_line="203" end_line="203">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = position;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JSI_1" type="JSI">
<modified_source name="LinkedList.java" start_line="14" end_line="14">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private static linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_12" type="PRV">
<modified_source name="LinkedList.java" start_line="94" end_line="94">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = first;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_4" type="PRV">
<modified_source name="LinkedList.java" start_line="55" end_line="55">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = last;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_5" type="PRV">
<modified_source name="LinkedList.java" start_line="55" end_line="55">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = first;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_1" type="PRV">
<modified_source name="LinkedList.java" start_line="37" end_line="37">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = last;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_10" type="PRV">
<modified_source name="LinkedList.java" start_line="92" end_line="92">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = last;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JSI_2" type="JSI">
<modified_source name="LinkedList.java" start_line="16" end_line="16">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private static linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_6" type="PRV">
<modified_source name="LinkedList.java" start_line="57" end_line="57">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = newNode;
} else {
first.previous = newNode;
}
first = last;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>yes</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="PRV_3" type="PRV">
<modified_source name="LinkedList.java" start_line="53" end_line="53">
// This is mutant program.
// Author : ysma

package linkedlist;


import java.util.NoSuchElementException;


public class LinkedList
{

private linkedlist.LinkedList.Node first;

private linkedlist.LinkedList.Node last;

public LinkedList()
{
first = null;
last = null;
}

public java.lang.Object getFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
return first.data;
}

public java.lang.Object removeFirst()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
if (first == null) {
last = null;
} else {
first.previous = null;
}
return element;
}

public void addFirst( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = first;
newNode.previous = null;
if (first == null) {
last = first;
} else {
first.previous = newNode;
}
first = newNode;
}

public java.lang.Object getLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
return last.data;
}

public java.lang.Object removeLast()
{
if (last == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = last.data;
last = last.previous;
if (last == null) {
first = null;
} else {
last.next = null;
}
return element;
}

public void addLast( java.lang.Object element )
{
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = null;
newNode.previous = last;
if (last == null) {
first = newNode;
} else {
last.next = newNode;
}
last = newNode;
}

public linkedlist.ListIterator listIterator()
{
return new linkedlist.LinkedList.LinkedListIterator();
}

class Node
{

public java.lang.Object data;

public linkedlist.LinkedList.Node next;

public linkedlist.LinkedList.Node previous;

}

class LinkedListIterator implements linkedlist.ListIterator
{

private linkedlist.LinkedList.Node position;

private boolean isAfterNext;

private boolean isAfterPrevious;

public LinkedListIterator()
{
position = null;
isAfterNext = false;
isAfterPrevious = false;
}

public java.lang.Object next()
{
if (!hasNext()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = true;
isAfterPrevious = false;
if (position == null) {
position = first;
} else {
position = position.next;
}
return position.data;
}

public boolean hasNext()
{
if (position == null) {
return first != null;
} else {
return position.next != null;
}
}

public java.lang.Object previous()
{
if (!hasPrevious()) {
throw new java.util.NoSuchElementException();
}
isAfterNext = false;
isAfterPrevious = true;
java.lang.Object result = position.data;
position = position.previous;
return result;
}

public boolean hasPrevious()
{
return position != null;
}

public void add( java.lang.Object element )
{
if (position == null) {
addFirst( element );
position = first;
} else {
if (position == last) {
addLast( element );
position = last;
} else {
linkedlist.LinkedList.Node newNode = new linkedlist.LinkedList.Node();
newNode.data = element;
newNode.next = position.next;
newNode.next.previous = newNode;
position.next = newNode;
newNode.previous = position;
position = newNode;
}
}
isAfterNext = false;
isAfterPrevious = false;
}

public void remove()
{
linkedlist.LinkedList.Node positionToRemove = lastPosition();
if (positionToRemove == first) {
removeFirst();
} else {
if (positionToRemove == last) {
removeLast();
} else {
positionToRemove.previous.next = positionToRemove.next;
positionToRemove.next.previous = positionToRemove.previous;
}
}
if (isAfterNext) {
position = position.previous;
}
isAfterNext = false;
isAfterPrevious = false;
}

public void set( java.lang.Object element )
{
linkedlist.LinkedList.Node positionToSet = lastPosition();
positionToSet.data = element;
}

private linkedlist.LinkedList.Node lastPosition()
{
if (isAfterNext) {
return position;
} else {
if (isAfterPrevious) {
if (position == null) {
return first;
} else {
return position.next;
}
} else {
throw new java.lang.IllegalStateException();
}
}
}

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_1" type="ROR">
<modified_source name="LinkedListStack.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private stack.LinkedListStack.Node first;

public LinkedListStack()
{
first = null;
}

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (first != null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return first == null;
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>yes</result>
</test>
<test name="stackTest2">
<result>yes</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_1" type="COI">
<modified_source name="LinkedListStack.java" start_line="27" end_line="27">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private stack.LinkedListStack.Node first;

public LinkedListStack()
{
first = null;
}

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (!(first == null)) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return first == null;
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>yes</result>
</test>
<test name="stackTest2">
<result>yes</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="ROR_2" type="ROR">
<modified_source name="LinkedListStack.java" start_line="49" end_line="49">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private stack.LinkedListStack.Node first;

public LinkedListStack()
{
first = null;
}

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return first != null;
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>yes</result>
</test>
<test name="stackTest2">
<result>yes</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="COI_2" type="COI">
<modified_source name="LinkedListStack.java" start_line="32" end_line="32">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private stack.LinkedListStack.Node first;

public LinkedListStack()
{
first = null;
}

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return !(first == null);
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JDC_1" type="JDC">
<modified_source name="LinkedListStack.java" start_line="17" end_line="17">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private stack.LinkedListStack.Node first;

// public JDC_1() { ... }

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return first == null;
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
<mutant_program name="JSI_1" type="JSI">
<modified_source name="LinkedListStack.java" start_line="14" end_line="14">
// This is mutant program.
// Author : ysma

package stack;


import java.util.NoSuchElementException;


public class LinkedListStack
{

private static stack.LinkedListStack.Node first;

public LinkedListStack()
{
first = null;
}

public void push( java.lang.Object element )
{
stack.LinkedListStack.Node newNode = new stack.LinkedListStack.Node();
newNode.data = element;
newNode.next = first;
first = newNode;
}

public java.lang.Object pop()
{
if (first == null) {
throw new java.util.NoSuchElementException();
}
java.lang.Object element = first.data;
first = first.next;
return element;
}

public boolean empty()
{
return first == null;
}

class Node
{

public java.lang.Object data;

public stack.LinkedListStack.Node next;

}

}
</modified_source>
<test name="linkedListTest1">
<result>no</result>
</test>
<test name="linkedListTest2">
<result>no</result>
</test>
<test name="linkedListTest3">
<result>no</result>
</test>
<test name="linkedListTest4">
<result>no</result>
</test>
<test name="linkedListTest5">
<result>no</result>
</test>
<test name="linkedListTest6">
<result>no</result>
</test>
<test name="linkedListTest7">
<result>no</result>
</test>
<test name="stackTest1">
<result>no</result>
</test>
<test name="stackTest2">
<result>no</result>
</test>
<test name="stackTest3">
<result>no</result>
</test>
<test name="stackTest4">
<result>no</result>
</test>
<test name="hashTest1">
<result>no</result>
</test>
<test name="hashTest2">
<result>no</result>
</test>
<test name="hashTest3">
<result>no</result>
</test>
<test name="hashTest4">
<result>no</result>
</test>
<test name="hashTest5">
<result>no</result>
</test>
<test name="hashTest6">
<result>no</result>
</test>
<test name="hashTest7">
<result>no</result>
</test>
</mutant_program>
</data>
